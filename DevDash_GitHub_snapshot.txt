# Code Repository Snapshot: DevDash_GitHub

--------------------------------------------
Generated with reposnap v1.3.0
Project: https://github.com/akhshyganesh/reposnap#readme
Author: akhshyganesh
Generated on: 7/14/2025 at 12:44:25 AM
--------------------------------------------


üìÑ README.md
  ---
  # DevDash-GitHub-OAuth
  ---

üìÅ backend/
  üìÅ config/
    üìÑ database.js
      ---
      const mongoose = require("mongoose");
      
      const connectDB = async () => {
        try {
          await mongoose.connect(process.env.MONGODB_URI);
          console.log("MongoDB connected successfully");
        } catch (error) {
          console.error("MongoDB connection error:", error);
          process.exit(1);
        }
      };
      
      module.exports = connectDB;
      
      ---

    üìÑ passport.js
      ---
      require("dotenv").config();
      const passport = require("passport");
      const GitHubStrategy = require("passport-github2").Strategy;
      const User = require("../models/User");
      
      if (!process.env.GITHUB_CLIENT_ID || !process.env.GITHUB_CLIENT_SECRET) {
        console.error("GitHub OAuth credentials not found in environment variables");
        process.exit(1);
      }
      
      passport.use(
        new GitHubStrategy(
          {
            clientID: process.env.GITHUB_CLIENT_ID,
            clientSecret: process.env.GITHUB_CLIENT_SECRET,
            callbackURL: process.env.GITHUB_CALLBACK_URL,
          },
          async (accessToken, refreshToken, profile, done) => {
            try {
              let user = await User.findOne({ githubId: profile.id });
      
              if (user) {
                user.accessToken = accessToken;
                await user.save();
                return done(null, user);
              }
      
              user = new User({
                githubId: profile.id,
                username: profile.username || profile.login || "unknown",
                displayName:
                  profile.displayName ||
                  profile.name ||
                  profile.username ||
                  "Unknown User",
                email:
                  profile.emails && profile.emails[0] ? profile.emails[0].value : "",
                avatarUrl:
                  profile.photos && profile.photos[0] ? profile.photos[0].value : "",
                accessToken: accessToken,
              });
      
              await user.save();
              return done(null, user);
            } catch (error) {
              return done(error, null);
            }
          }
        )
      );
      
      module.exports = passport;
      
      ---

  üìÅ controllers/
    üìÑ devtoController.js
      ---
      const axios = require("axios");
      
      const fetchdevtoController = async (req, res) => {
        try {
          const { username } = req.params;
      
          if (!username) {
            return res.status(400).json({
              message: "Username is required",
              success: false,
            });
          }
      
          const response = await axios.get(
            `https://dev.to/api/articles?username=${username}`,
            {
              headers: {
                Accept: "application/json",
              },
            }
          );
      
          const articles = response.data.map((article) => ({
            id: article.id,
            title: article.title,
            description: article.description,
            url: article.url,
            published_at: article.published_at,
            tag_list: article.tag_list,
            social_image: article.social_image,
            reading_time_minutes: article.reading_time_minutes,
            public_reactions_count: article.public_reactions_count,
          }));
      
          return res.status(200).json({
            message: "Dev.to articles fetched successfully",
            data: articles,
            success: true,
          });
        } catch (err) {
          console.log(`Error in fetch dev to Controller - ${err.message}`);
      
          if (err.response && err.response.status === 404) {
            return res.status(404).json({
              message: "User not found on Dev.to",
              success: false,
            });
          }
      
          return res.status(500).json({
            message: "Internal Server Error",
            error: err.message,
            success: false,
          });
        }
      };
      
      module.exports = { fetchdevtoController };
      
      ---

    üìÑ eventController.js
      ---
      const Event = require("../models/Event");
      const { readEvents, writeEvents } = require("../utils/jsonStorage");
      
      const saveEventController = async (req, res) => {
        try {
          const { title, date, time, description } = req.body;
      
          if (!title || !date || !time) {
            return res.status(400).json({
              message: "Title, date, and time are required",
              success: false,
            });
          }
      
          if (process.env.MONGODB_URI) {
            const newEvent = new Event({
              userId: req.user._id,
              title,
              date: new Date(date),
              time,
              description: description || "",
            });
      
            const savedEvent = await newEvent.save();
      
            return res.status(201).json({
              message: "Event saved successfully",
              data: savedEvent,
              success: true,
            });
          } else {
            const events = readEvents();
            const newEvent = {
              id: Date.now().toString(),
              userId: req.user._id.toString(),
              title,
              date,
              time,
              description: description || "",
              createdAt: new Date().toISOString(),
            };
      
            events.push(newEvent);
      
            if (writeEvents(events)) {
              return res.status(201).json({
                message: "Event saved successfully",
                data: newEvent,
                success: true,
              });
            } else {
              throw new Error("Failed to save event to file");
            }
          }
        } catch (err) {
          console.log(`Error in save Event Controller - ${err.message}`);
          return res.status(500).json({
            message: "Internal Server Error",
            error: err.message,
            success: false,
          });
        }
      };
      
      const fetchsavedEventController = async (req, res) => {
        try {
          if (process.env.MONGODB_URI) {
            const events = await Event.find({ userId: req.user._id }).sort({
              date: 1,
            });
      
            return res.status(200).json({
              message: "Events fetched successfully",
              data: events,
              success: true,
            });
          } else {
            const allEvents = readEvents();
            const userEvents = allEvents.filter(
              (event) => event.userId === req.user._id.toString()
            );
      
            return res.status(200).json({
              message: "Events fetched successfully",
              data: userEvents,
              success: true,
            });
          }
        } catch (err) {
          console.log(`Error in fetch saved event Controller - ${err.message}`);
          return res.status(500).json({
            message: "Internal Server Error",
            error: err.message,
            success: false,
          });
        }
      };
      
      module.exports = { saveEventController, fetchsavedEventController };
      
      ---

    üìÑ githubController.js
      ---
      const axios = require("axios");
      
      const fetchgithubController = async (req, res) => {
        try {
          if (!req.user || !req.user.accessToken) {
            return res.status(401).json({
              message: "GitHub access token not found",
              success: false,
            });
          }
      
          const response = await axios.get("https://api.github.com/user/repos", {
            headers: {
              Authorization: `token ${req.user.accessToken}`,
              Accept: "application/vnd.github.v3+json",
            },
            params: {
              sort: "updated",
              per_page: 50,
            },
          });
      
          const repos = response.data.map((repo) => ({
            id: repo.id,
            name: repo.name,
            description: repo.description,
            html_url: repo.html_url,
            language: repo.language,
            stargazers_count: repo.stargazers_count,
            forks_count: repo.forks_count,
            updated_at: repo.updated_at,
            private: repo.private,
          }));
      
          return res.status(200).json({
            message: "GitHub repositories fetched successfully",
            data: repos,
            success: true,
          });
        } catch (err) {
          console.log(`Error in fetch github Controller - ${err.message}`);
          return res.status(500).json({
            message: "Internal Server Error",
            error: err.message,
            success: false,
          });
        }
      };
      
      module.exports = { fetchgithubController };
      
      ---

  üìÑ index.js
    ---
    require("dotenv").config();
    const express = require("express");
    const cors = require("cors");
    const connectDB = require("./config/database");
    const passport = require("./config/passport");
    const cookieParser = require("cookie-parser");
    
    const app = express();
    const PORT = process.env.PORT || 5000;
    
    // üîå Connect to MongoDB
    if (process.env.MONGODB_URI) {
      connectDB();
    }
    
    // üåê Define allowed origins
    const allowedOrigins = [
      process.env.FRONTEND_URL,
      "http://localhost:5173",
      "http://localhost:5000",
      "http://127.0.0.1:5173",
      "http://127.0.0.1:5000"
    ].filter(Boolean);
    
    // ‚úÖ Final CORS setup
    const corsOptions = {
      origin: function (origin, callback) {
        if (!origin) return callback(null, true); // Allow tools like Postman
    
        try {
          const isAllowed = allowedOrigins.includes(origin);
    
          if (isAllowed) return callback(null, true);
    
          // Allow subdomains in production
          if (process.env.NODE_ENV === "production" && process.env.FRONTEND_URL) {
            const frontendUrl = new URL(process.env.FRONTEND_URL);
            const originUrl = new URL(origin);
    
            if (
              originUrl.hostname === frontendUrl.hostname ||
              originUrl.hostname.endsWith(`.${frontendUrl.hostname}`)
            ) {
              return callback(null, true);
            }
    
            // Allow onrender.com or vercel.app subdomains
            if (
              frontendUrl.hostname.includes("onrender.com") &&
              originUrl.hostname.includes("onrender.com")
            ) {
              return callback(null, true);
            }
    
            if (
              frontendUrl.hostname.includes("vercel.app") &&
              originUrl.hostname.includes("vercel.app")
            ) {
              return callback(null, true);
            }
          }
        } catch (err) {
          console.warn("‚ùå CORS origin check failed:", err);
        }
    
        console.warn("‚ùå CORS blocked origin:", origin);
        callback(new Error("Not allowed by CORS"));
      },
      credentials: true,
      methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
      allowedHeaders: ["Content-Type", "Authorization", "X-Requested-With"],
      exposedHeaders: ["Set-Cookie"],
    };
    
    // üß© Middleware
    app.use(cors(corsOptions));
    app.use(cookieParser());
    app.use(express.json());
    app.use(passport.initialize());
    
    // üì¶ Routes
    const authRoutes = require("./routes/authRoutes");
    const githubRoutes = require("./routes/githubRoutes");
    const eventRoutes = require("./routes/eventRoutes");
    const devtoRoutes = require("./routes/devtoRoutes");
    
    app.use("/api/auth", authRoutes);
    app.use("/api/github", githubRoutes);
    app.use("/api/devto", devtoRoutes);
    app.use("/api/events", eventRoutes);
    
    // ‚úÖ Health Check
    app.get("/", (req, res) => {
      res.json({
        message: "GitHub OAuth + Dev.to + Calendar Backend API",
        success: true,
      });
    });
    
    // üöÄ Start Server
    app.listen(PORT, () => {
      console.log(`‚úÖ Server running on port ${PORT}`);
      console.log(`üåç Environment: ${process.env.NODE_ENV || "development"}`);
      console.log(`üåê Allowed frontend: ${process.env.FRONTEND_URL || "http://localhost:5173"}`);
    });
    
    ---

  üìÅ middleware/
    üìÑ auth.js
      ---
      const jwt = require("jsonwebtoken");
      const User = require("../models/User");
      
      const authenticateToken = async (req, res, next) => {
        try {
          // ‚úÖ Read token from secure cookie
          const token = req.cookies.token;
      
          if (!token) {
            return res.status(401).json({
              message: "Access token required",
              success: false,
            });
          }
      
          const decoded = jwt.verify(token, process.env.JWT_SECRET);
          const user = await User.findById(decoded.userId);
      
          if (!user) {
            return res.status(401).json({
              message: "Invalid token - user not found",
              success: false,
            });
          }
      
          req.user = user;
          next();
        } catch (error) {
          return res.status(403).json({
            message: "Invalid or expired token",
            success: false,
          });
        }
      };
      
      module.exports = { authenticateToken };
      
      ---

  üìÅ models/
    üìÑ Event.js
      ---
      const mongoose = require("mongoose");
      
      const eventSchema = new mongoose.Schema(
        {
          userId: {
            type: mongoose.Schema.Types.ObjectId,
            ref: "User",
            required: true,
          },
          title: {
            type: String,
            required: true,
          },
          date: {
            type: Date,
            required: true,
          },
          time: {
            type: String,
            required: true,
          },
          description: {
            type: String,
            default: "",
          },
        },
        {
          timestamps: true,
        }
      );
      
      module.exports = mongoose.model("Event", eventSchema);
      
      ---

    üìÑ User.js
      ---
      const mongoose = require("mongoose");
      
      const userSchema = new mongoose.Schema(
        {
          githubId: {
            type: String,
            required: true,
            unique: true,
          },
          username: {
            type: String,
            required: true,
          },
          displayName: {
            type: String,
            default: "",
          },
          email: {
            type: String,
            default: "",
          },
          avatarUrl: {
            type: String,
            default: "",
          },
          accessToken: String,
        },
        {
          timestamps: true,
        }
      );
      
      module.exports = mongoose.model("User", userSchema);
      
      ---

  üìÅ routes/
    üìÑ authRoutes.js
      ---
      const express = require("express");
      const passport = require("passport");
      const jwt = require("jsonwebtoken");
      const { authenticateToken } = require("../middleware/auth");
      const router = express.Router();
      
      // GitHub OAuth login start
      router.get("/github", (req, res, next) => {
        console.log("üöÄ GitHub OAuth login initiated");
        console.log("üìã Request query:", req.query);
        console.log("üåê Request headers:", req.headers);
        
        const redirectTo = req.query.redirectTo || "/dashboard";
        passport.authenticate("github", {
          scope: ["user:email", "repo"],
          state: encodeURIComponent(redirectTo),
        })(req, res, next);
      });
      
      // GitHub OAuth callback with robust cookie handling
      router.get(
        "/github/callback",
        (req, res, next) => {
          console.log("üîÑ GitHub callback received");
          console.log("üìã Callback query:", req.query);
          console.log("üåê Callback headers:", req.headers);
          next();
        },
        passport.authenticate("github", {
          session: false,
          failureRedirect: "/api/auth/login",
        }),
        (req, res) => {
          try {
            console.log("üîê GitHub callback processing for user:", req.user?.username);
            
            if (!req.user) {
              console.error("‚ùå No user object in callback");
              const frontendUrl = process.env.FRONTEND_URL || "http://localhost:5173";
              return res.redirect(`${frontendUrl}/login?error=no_user`);
            }
            
            const token = jwt.sign(
              {
                userId: req.user._id,
                username: req.user.username,
                email: req.user.email,
              },
              process.env.JWT_SECRET,
              { expiresIn: "7d" }
            );
      
            const frontendUrl = process.env.FRONTEND_URL || "http://localhost:5173";
            const redirectTo = decodeURIComponent(req.query.state || "/dashboard");
      
            // ‚úÖ Simplified and robust cookie configuration
            const getCookieOptions = () => {
              const isProduction = process.env.NODE_ENV === "production";
              
              const options = {
                httpOnly: true,
                secure: isProduction,
                sameSite: isProduction ? "none" : "lax",
                maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
                path: "/",
              };
      
              // ‚úÖ Simplified domain handling for production
              if (isProduction) {
                try {
                  const url = new URL(frontendUrl);
                  const hostname = url.hostname;
                  
                  // For onrender.com subdomains
                  if (hostname.includes('onrender.com')) {
                    // Don't set domain for onrender.com - let browser handle it
                    console.log("üåê OnRender.com detected - not setting domain for cookie");
                  }
                  // For vercel.app subdomains  
                  else if (hostname.includes('vercel.app')) {
                    // Don't set domain for vercel.app - let browser handle it
                    console.log("üåê Vercel.app detected - not setting domain for cookie");
                  }
                  // For custom domains
                  else if (!hostname.includes('localhost')) {
                    options.domain = hostname;
                    console.log("üåê Custom domain detected:", hostname);
                  }
                } catch (error) {
                  console.warn("‚ö†Ô∏è Could not parse frontend URL for cookie domain:", error);
                }
      
                // Allow explicit override
                if (process.env.COOKIE_DOMAIN) {
                  options.domain = process.env.COOKIE_DOMAIN;
                  console.log("üåê Using explicit cookie domain:", process.env.COOKIE_DOMAIN);
                }
              }
      
              return options;
            };
      
            // Set the token cookie with proper options
            const cookieOptions = getCookieOptions();
            res.cookie("token", token, cookieOptions);
      
            console.log("üç™ Cookie set with options:", cookieOptions);
      
            // ‚úÖ Set multiple cookie variations for better compatibility
            if (process.env.NODE_ENV === "production") {
              // Set without domain for better cross-subdomain compatibility
              res.cookie("token_alt", token, {
                ...cookieOptions,
                domain: undefined,
              });
              
              // Set with SameSite=None for cross-site requests
              res.cookie("token_cross", token, {
                ...cookieOptions,
                domain: undefined,
                sameSite: "none",
              });
            }
      
            // For debugging - set a non-httpOnly cookie in development
            if (process.env.NODE_ENV !== "production") {
              res.cookie("token_debug", token, {
                ...cookieOptions,
                httpOnly: false,
              });
            }
      
            // ‚úÖ Redirect to frontend with token in URL as fallback
            const redirectUrl = new URL(redirectTo, frontendUrl);
            redirectUrl.searchParams.set('token', token);
            
            console.log("üîó Redirecting to:", redirectUrl.toString());
            res.redirect(redirectUrl.toString());
          } catch (error) {
            console.error("‚ùå Error in GitHub callback:", error);
            const frontendUrl = process.env.FRONTEND_URL || "http://localhost:5173";
            res.redirect(`${frontendUrl}/login?error=auth_failed`);
          }
        }
      );
      
      // Authenticated profile route with multiple token sources
      router.get("/profile", async (req, res) => {
        try {
          // ‚úÖ Check multiple cookie variations and token sources
          let token = req.cookies.token || 
                      req.cookies.token_alt || 
                      req.cookies.token_cross ||
                      req.cookies.token_debug ||
                      req.headers.authorization?.replace('Bearer ', '') || 
                      req.query.token;
      
          console.log("üîç Token sources checked:");
          console.log("  - req.cookies.token:", req.cookies.token ? "FOUND" : "NOT FOUND");
          console.log("  - req.cookies.token_alt:", req.cookies.token_alt ? "FOUND" : "NOT FOUND");
          console.log("  - req.cookies.token_cross:", req.cookies.token_cross ? "FOUND" : "NOT FOUND");
          console.log("  - req.cookies.token_debug:", req.cookies.token_debug ? "FOUND" : "NOT FOUND");
          console.log("  - req.headers.authorization:", req.headers.authorization ? "FOUND" : "NOT FOUND");
          console.log("  - req.query.token:", req.query.token ? "FOUND" : "NOT FOUND");
      
          if (!token) {
            console.log("‚ùå No token found in any source");
            return res.status(401).json({
              message: "Access token required",
              success: false,
            });
          }
      
          const decoded = jwt.verify(token, process.env.JWT_SECRET);
          const user = await require("../models/User").findById(decoded.userId);
      
          if (!user) {
            return res.status(401).json({
              message: "Invalid token - user not found",
              success: false,
            });
          }
      
          res.json({
            message: "User profile fetched successfully",
            user: {
              id: user._id,
              username: user.username,
              displayName: user.displayName,
              email: user.email,
              avatarUrl: user.avatarUrl,
            },
            success: true,
          });
        } catch (error) {
          console.error("‚ùå Error fetching profile:", error);
          res.status(500).json({
            message: "Error fetching profile",
            error: error.message,
            success: false,
          });
        }
      });
      
      // Logout route
      router.post("/logout", (req, res) => {
        try {
          const cookieOptions = {
            httpOnly: true,
            secure: process.env.NODE_ENV === "production",
            sameSite: process.env.NODE_ENV === "production" ? "none" : "lax",
            path: "/",
          };
      
          // Try to clear cookie with domain if in production
          if (process.env.NODE_ENV === "production") {
            try {
              const frontendUrl = process.env.FRONTEND_URL || "http://localhost:5173";
              const url = new URL(frontendUrl);
              if (!url.hostname.includes('localhost')) {
                cookieOptions.domain = url.hostname.includes('onrender.com') 
                  ? '.onrender.com' 
                  : url.hostname;
              }
            } catch (error) {
              console.warn("Could not parse frontend URL for cookie domain:", error);
            }
      
            // Allow explicit override
            if (process.env.COOKIE_DOMAIN) {
              cookieOptions.domain = process.env.COOKIE_DOMAIN;
            }
          }
      
          // ‚úÖ Clear all token cookie variations
          res.clearCookie("token", cookieOptions);
          res.clearCookie("token_alt", cookieOptions);
          res.clearCookie("token_cross", cookieOptions);
          
          // Also clear debug cookie if exists
          if (process.env.NODE_ENV !== "production") {
            res.clearCookie("token_debug", {
              ...cookieOptions,
              httpOnly: false,
            });
          }
      
          res.json({
            message: "Logout successful",
            success: true,
          });
        } catch (error) {
          console.error("‚ùå Error during logout:", error);
          res.status(500).json({
            message: "Error during logout",
            error: error.message,
            success: false,
          });
        }
      });
      
      // Health check route
      router.get("/health", (req, res) => {
        res.json({
          message: "Auth service is running",
          environment: process.env.NODE_ENV,
          timestamp: new Date().toISOString(),
          success: true,
        });
      });
      
      // Debug route to check cookie presence
      router.get("/debug/cookies", (req, res) => {
        res.json({
          cookies: req.cookies,
          headers: req.headers,
          environment: process.env.NODE_ENV,
          frontendUrl: process.env.FRONTEND_URL,
          cookieDomain: process.env.COOKIE_DOMAIN,
          success: true,
        });
      });
      
      // Debug route to test cookie setting
      router.get("/debug/set-cookie", (req, res) => {
        const testToken = "test-token-" + Date.now();
        
        const cookieOptions = {
          httpOnly: true,
          secure: process.env.NODE_ENV === "production",
          sameSite: process.env.NODE_ENV === "production" ? "none" : "lax",
          maxAge: 60 * 1000, // 1 minute
          path: "/",
        };
      
        // Handle domain configuration for production
        if (process.env.NODE_ENV === "production") {
          if (process.env.COOKIE_DOMAIN) {
            cookieOptions.domain = process.env.COOKIE_DOMAIN;
          } else {
            try {
              const frontendUrl = process.env.FRONTEND_URL || "http://localhost:5173";
              const url = new URL(frontendUrl);
              if (url.hostname !== "localhost") {
                if (url.hostname.includes('onrender.com')) {
                  cookieOptions.domain = `.onrender.com`;
                } else {
                  cookieOptions.domain = url.hostname;
                }
              }
            } catch (error) {
              console.warn("Could not parse frontend URL for cookie domain:", error);
            }
          }
        }
      
        res.cookie("test-token", testToken, cookieOptions);
        
        res.json({
          message: "Test cookie set",
          cookieOptions,
          testToken,
          success: true,
        });
      });
      
      // Test endpoint to verify GitHub OAuth is working
      router.get("/test-oauth", (req, res) => {
        console.log("üß™ Test OAuth endpoint called");
        console.log("üìã Environment variables:");
        console.log("  - NODE_ENV:", process.env.NODE_ENV);
        console.log("  - FRONTEND_URL:", process.env.FRONTEND_URL);
        console.log("  - COOKIE_DOMAIN:", process.env.COOKIE_DOMAIN);
        console.log("  - GITHUB_CLIENT_ID:", process.env.GITHUB_CLIENT_ID ? "SET" : "NOT SET");
        console.log("  - GITHUB_CLIENT_SECRET:", process.env.GITHUB_CLIENT_SECRET ? "SET" : "NOT SET");
        console.log("  - GITHUB_CALLBACK_URL:", process.env.GITHUB_CALLBACK_URL);
        console.log("  - JWT_SECRET:", process.env.JWT_SECRET ? "SET" : "NOT SET");
        
        res.json({
          message: "OAuth test endpoint",
          environment: process.env.NODE_ENV,
          frontendUrl: process.env.FRONTEND_URL,
          cookieDomain: process.env.COOKIE_DOMAIN,
          githubClientId: process.env.GITHUB_CLIENT_ID ? "SET" : "NOT SET",
          githubCallbackUrl: process.env.GITHUB_CALLBACK_URL,
          jwtSecret: process.env.JWT_SECRET ? "SET" : "NOT SET",
          success: true,
        });
      });
      
      // ‚úÖ Test endpoint to simulate OAuth callback and set cookies
      router.get("/test-callback", (req, res) => {
        try {
          console.log("üß™ Test callback endpoint called");
          
          // Create a test token
          const testToken = jwt.sign(
            {
              userId: "test-user-id",
              username: "testuser",
              email: "test@example.com",
            },
            process.env.JWT_SECRET,
            { expiresIn: "1h" }
          );
      
          const frontendUrl = process.env.FRONTEND_URL || "http://localhost:5173";
          
          // Set cookies with the same logic as the real callback
          const isProduction = process.env.NODE_ENV === "production";
          
          const cookieOptions = {
            httpOnly: true,
            secure: isProduction,
            sameSite: isProduction ? "none" : "lax",
            maxAge: 60 * 60 * 1000, // 1 hour for test
            path: "/",
          };
      
          // Set multiple cookie variations
          res.cookie("token", testToken, cookieOptions);
          res.cookie("token_alt", testToken, { ...cookieOptions, domain: undefined });
          res.cookie("token_cross", testToken, { ...cookieOptions, domain: undefined, sameSite: "none" });
          
          if (process.env.NODE_ENV !== "production") {
            res.cookie("token_debug", testToken, { ...cookieOptions, httpOnly: false });
          }
      
          console.log("üç™ Test cookies set with options:", cookieOptions);
          
          // Redirect to frontend with token in URL
          const redirectUrl = new URL("/dashboard", frontendUrl);
          redirectUrl.searchParams.set('token', testToken);
          
          console.log("üîó Redirecting to test URL:", redirectUrl.toString());
          res.redirect(redirectUrl.toString());
        } catch (error) {
          console.error("‚ùå Error in test callback:", error);
          res.status(500).json({
            message: "Test callback failed",
            error: error.message,
            success: false,
          });
        }
      });
      
      module.exports = router;
      ---

    üìÑ devtoRoutes.js
      ---
      const express = require("express");
      const router = express.Router();
      const { fetchdevtoController } = require("../controllers/devtoController");
      
      router.get("/articles/:username", fetchdevtoController);
      
      module.exports = router;
      
      ---

    üìÑ eventRoutes.js
      ---
      const express = require("express");
      const router = express.Router();
      const {
        fetchsavedEventController,
        saveEventController,
      } = require("../controllers/eventController");
      const { authenticateToken } = require("../middleware/auth");
      
      router.get("/", authenticateToken, fetchsavedEventController);
      router.post("/", authenticateToken, saveEventController);
      
      module.exports = router;
      
      ---

    üìÑ githubRoutes.js
      ---
      const express = require("express");
      const router = express.Router();
      const { fetchgithubController } = require("../controllers/githubController");
      const { authenticateToken } = require("../middleware/auth");
      
      router.get("/repos", authenticateToken, fetchgithubController);
      
      module.exports = router;
      
      ---

  üìÅ utils/
    üìÑ jsonStorage.js
      ---
      const fs = require("fs");
      const path = require("path");
      
      const dataDir = path.join(__dirname, "..", "data");
      const eventsFile = path.join(dataDir, "events.json");
      
      const ensureDataDir = () => {
        if (!fs.existsSync(dataDir)) {
          fs.mkdirSync(dataDir, { recursive: true });
        }
      };
      
      const readEvents = () => {
        try {
          ensureDataDir();
          if (!fs.existsSync(eventsFile)) {
            return [];
          }
          const data = fs.readFileSync(eventsFile, "utf8");
          return JSON.parse(data);
        } catch (error) {
          console.error("Error reading events:", error);
          return [];
        }
      };
      
      const writeEvents = (events) => {
        try {
          ensureDataDir();
          fs.writeFileSync(eventsFile, JSON.stringify(events, null, 2));
          return true;
        } catch (error) {
          console.error("Error writing events:", error);
          return false;
        }
      };
      
      module.exports = { readEvents, writeEvents };
      
      ---

üìÅ frontend/
  üìÑ README.md
    ---
    # React + Vite
    
    This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.
    
    Currently, two official plugins are available:
    
    - [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
    - [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh
    
    ## Expanding the ESLint configuration
    
    If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
    
    ---

  üìÑ eslint.config.js
    ---
    import js from '@eslint/js'
    import globals from 'globals'
    import reactHooks from 'eslint-plugin-react-hooks'
    import reactRefresh from 'eslint-plugin-react-refresh'
    import { defineConfig, globalIgnores } from 'eslint/config'
    
    export default defineConfig([
      globalIgnores(['dist']),
      {
        files: ['**/*.{js,jsx}'],
        extends: [
          js.configs.recommended,
          reactHooks.configs['recommended-latest'],
          reactRefresh.configs.vite,
        ],
        languageOptions: {
          ecmaVersion: 2020,
          globals: globals.browser,
          parserOptions: {
            ecmaVersion: 'latest',
            ecmaFeatures: { jsx: true },
            sourceType: 'module',
          },
        },
        rules: {
          'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
        },
      },
    ])
    
    ---

  üìÑ index.html
    ---
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>DevDash_Github</title>
      </head>
      <body>
        <div id="root"></div>
        <script type="module" src="/src/main.jsx"></script>
      </body>
    </html>
    
    ---

  üìÅ src/
    üìÑ App.jsx
      ---
      import React from 'react'
      import { BrowserRouter, Routes, Route } from "react-router-dom";
      import { AuthProvider } from "./context/AuthContext";
      import ProtectedRoute from "./components/Auth/ProtectedRoute";
      import Home from "./pages/Home";
      import Login from "./pages/Login";
      import Dashboard from "./pages/Dashboard";
      import ErrorPage from "./pages/ErrorPage";
      
      export default function App() {
        return (
          <BrowserRouter>
            <AuthProvider>
              <Routes>
                <Route path="/" element={<Home />} />
                <Route path="/login" element={<Login />} />
                <Route
                  path="/dashboard"
                  element={
                    <ProtectedRoute>
                      <Dashboard />
                    </ProtectedRoute>
                  }
                />
                <Route path="*" element={<ErrorPage />} />
              </Routes>
            </AuthProvider>
          </BrowserRouter>
        );
      }
      
      ---

    üìÅ components/
      üìÅ Auth/
        üìÑ GitHubAuthButton.jsx
          ---
          import { useAuth } from "../../context/AuthContext";
          import { FaGithub } from "react-icons/fa";
          
          export default function GitHubAuthButton() {
            const { login } = useAuth();
          
            return (
              <button
                onClick={login}
                className="flex items-center justify-center gap-3 bg-gray-900 text-white px-6 py-3 rounded-lg hover:bg-gray-800 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-800"
              >
                <FaGithub className="text-xl" />
                <span>Login with GitHub</span>
              </button>
            );
          }   
          ---

        üìÑ ProtectedRoute.jsx
          ---
          import { Navigate, useLocation } from "react-router-dom";
          import { useAuth } from "../../context/AuthContext";
          
          export default function ProtectedRoute({ children }) {
            const { user, loading, initialized } = useAuth();
            const location = useLocation();
          
            console.log(
              "üõ°Ô∏è ProtectedRoute - Loading:",
              loading,
              "User:",
              user ? "exists" : "null",
              "Initialized:",
              initialized
            );
          
            // Show loading spinner while checking auth
            if (loading || !initialized) {
              return (
                <div className="flex justify-center items-center min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50">
                  <div className="relative">
                    <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-600"></div>
                    <div className="absolute inset-0 animate-ping rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-600/30"></div>
                  </div>
                </div>
              );
            }
          
            // ‚úÖ Only redirect if not loading, initialized, and no user
            if (!loading && initialized && !user) {
              console.log("üö´ No user found, redirecting to login");
              return <Navigate to="/login" state={{ from: location }} replace />;
            }
          
            // ‚úÖ If we have a user and are initialized, render the content
            if (user && initialized) {
              console.log("‚úÖ User authenticated, rendering protected content");
              return children;
            }
          
            // ‚úÖ Fallback - show loading while we figure out the state
            console.log("‚è≥ Waiting for authentication state to resolve...");
            return (
              <div className="flex justify-center items-center min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50">
                <div className="relative">
                  <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-600"></div>
                  <div className="absolute inset-0 animate-ping rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-600/30"></div>
                </div>
              </div>
            );
          }
          
          ---

      üìÅ Calendar/
        üìÑ EventCalendar.jsx
          ---
          import { useState } from "react";
          import Calendar from "react-calendar";
          import { format } from "date-fns";
          import { useQuery } from "@tanstack/react-query";
          import { getEvents } from "../../services/events";
          import EventForm from "./EventForm";
          import "react-calendar/dist/Calendar.css";
          
          export default function EventCalendar() {
            const [date, setDate] = useState(new Date());
            const [showForm, setShowForm] = useState(false);
            const [selectedDate, setSelectedDate] = useState(null);
          
            const { data: events, isLoading, error } = useQuery({
              queryKey: ["events"],
              queryFn: getEvents,
            });
          
            const tileContent = ({ date, view }) => {
              if (view === "month") {
                const dayEvents = events?.filter(
                  (event) => new Date(event.date).toDateString() === date.toDateString()
                );
                return dayEvents?.length > 0 ? (
                  <div className="absolute top-1 right-1 h-3 w-3 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full animate-pulse"></div>
                ) : null;
              }
            };
          
            const handleDateClick = (value) => {
              setSelectedDate(value);
              setShowForm(true);
            };
          
            if (isLoading) {
              return (
                <div className="flex justify-center items-center py-16">
                  <div className="relative">
                    <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-600"></div>
                    <div className="absolute inset-0 animate-ping rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-600/30"></div>
                  </div>
                </div>
              );
            }
          
            if (error) {
              return (
                <div className="bg-gradient-to-r from-red-50 to-rose-50 border border-red-200 text-red-700 px-6 py-4 rounded-2xl shadow-lg">
                  <div className="flex items-center gap-3">
                    <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                    Error fetching events: {error.message}
                  </div>
                </div>
              );
            }
          
            return (
              <div className="space-y-8">
                <div className="bg-white rounded-3xl shadow-xl border border-slate-200 p-8">
                  <Calendar
                    onChange={setDate}
                    value={date}
                    tileContent={tileContent}
                    onClickDay={handleDateClick}
                    className="w-full border-0 rounded-2xl shadow-lg"
                  />
                </div>
          
                {showForm && (
                  <EventForm
                    selectedDate={selectedDate}
                    onClose={() => setShowForm(false)}
                  />
                )}
          
                <div className="space-y-6">
                  <h3 className="text-2xl font-bold bg-gradient-to-r from-slate-800 to-slate-600 bg-clip-text text-transparent">
                    Upcoming Events
                  </h3>
                  {events?.length > 0 ? (
                    <div className="grid gap-4">
                      {events.map((event) => (
                        <div
                          key={event.id}
                          className="group bg-white border border-slate-200 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 hover:border-blue-300 hover:scale-[1.02]"
                        >
                          <div className="flex items-start justify-between">
                            <div className="space-y-2">
                              <h4 className="font-bold text-slate-800 text-lg group-hover:text-blue-600 transition-colors">
                                {event.title}
                              </h4>
                              <div className="flex items-center gap-4 text-sm text-slate-500">
                                <span className="flex items-center gap-2">
                                  <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                                  {format(new Date(event.date), "MMMM d, yyyy")}
                                </span>
                                <span className="flex items-center gap-2">
                                  <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                                  {event.time}
                                </span>
                              </div>
                              <p className="text-slate-600">{event.description}</p>
                            </div>
                            <div className="w-4 h-4 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full group-hover:scale-110 transition-transform"></div>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-12">
                      <div className="w-16 h-16 bg-gradient-to-r from-slate-200 to-slate-300 rounded-full mx-auto mb-4 flex items-center justify-center">
                        <div className="w-8 h-8 bg-slate-400 rounded-full"></div>
                      </div>
                      <p className="text-slate-500 text-lg">No events scheduled yet</p>
                    </div>
                  )}
                </div>
              </div>
            );
          }
          ---

        üìÑ EventForm.jsx
          ---
          import { useForm } from "@tanstack/react-form";
          import { zodValidator } from "@tanstack/zod-form-adapter";
          import { z } from "zod";
          import { format } from "date-fns";
          import { createEvent } from "../../services/events";
          import Button from "../UI/Button";
          
          const schema = z.object({
            title: z.string().min(1, "Title is required"),
            description: z.string().optional(),
            time: z.string().min(1, "Time is required"),
          });
          
          export default function EventForm({ selectedDate, onClose }) {
            const form = useForm({
              validator: zodValidator,
              defaultValues: {
                title: "",
                description: "",
                time: "",
              },
              onSubmit: async ({ value }) => {
                try {
                  await createEvent({
                    ...value,
                    date: selectedDate.toISOString(),
                  });
                  onClose();
                } catch (error) {
                  console.error("Error creating event:", error);
                }
              },
            });
          
            return (
              <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4 z-50">
                <div className="bg-white rounded-3xl p-8 w-full max-w-lg shadow-2xl border border-slate-200">
                  <div className="text-center mb-6">
                    <h3 className="text-2xl font-bold bg-gradient-to-r from-slate-800 to-slate-600 bg-clip-text text-transparent mb-2">
                      Create New Event
                    </h3>
                    <p className="text-slate-500">
                      for {format(selectedDate, "MMMM d, yyyy")}
                    </p>
                  </div>
          
                  <form
                    onSubmit={(e) => {
                      e.preventDefault();
                      form.handleSubmit();
                    }}
                    className="space-y-6"
                  >
                    <form.Field
                      name="title"
                      children={(field) => (
                        <div>
                          <label className="block text-sm font-semibold text-slate-700 mb-2">
                            Event Title
                          </label>
                          <input
                            name={field.name}
                            value={field.state.value}
                            onBlur={field.handleBlur}
                            onChange={(e) => field.handleChange(e.target.value)}
                            className="w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all bg-slate-50 focus:bg-white"
                            placeholder="Enter event title"
                          />
                          {field.state.meta.errors && (
                            <div className="text-red-500 text-sm mt-2 flex items-center gap-2">
                              <div className="w-1 h-1 bg-red-500 rounded-full"></div>
                              {field.state.meta.errors.join(", ")}
                            </div>
                          )}
                        </div>
                      )}
                    />
          
                    <form.Field
                      name="time"
                      children={(field) => (
                        <div>
                          <label className="block text-sm font-semibold text-slate-700 mb-2">
                            Time
                          </label>
                          <input
                            type="time"
                            name={field.name}
                            value={field.state.value}
                            onBlur={field.handleBlur}
                            onChange={(e) => field.handleChange(e.target.value)}
                            className="w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all bg-slate-50 focus:bg-white"
                          />
                          {field.state.meta.errors && (
                            <div className="text-red-500 text-sm mt-2 flex items-center gap-2">
                              <div className="w-1 h-1 bg-red-500 rounded-full"></div>
                              {field.state.meta.errors.join(", ")}
                            </div>
                          )}
                        </div>
                      )}
                    />
          
                    <form.Field
                      name="description"
                      children={(field) => (
                        <div>
                          <label className="block text-sm font-semibold text-slate-700 mb-2">
                            Description
                          </label>
                          <textarea
                            name={field.name}
                            value={field.state.value}
                            onBlur={field.handleBlur}
                            onChange={(e) => field.handleChange(e.target.value)}
                            className="w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all bg-slate-50 focus:bg-white resize-none"
                            rows={3}
                            placeholder="Add event description..."
                          />
                        </div>
                      )}
                    />
          
                    <div className="flex gap-4 pt-4">
                      <Button
                        variant="outline"
                        onClick={onClose}
                        className="flex-1"
                      >
                        Cancel
                      </Button>
                      <Button
                        type="submit"
                        className="flex-1"
                      >
                        Create Event
                      </Button>
                    </div>
                  </form>
                </div>
              </div>
            );
          }
          ---

      üìÅ DevTo/
        üìÑ ArticleCard.jsx
          ---
          import { FaRegClock, FaRegHeart, FaExternalLinkAlt } from "react-icons/fa";
          
          export default function ArticleCard({ article }) {
            return (
              <div className="group bg-white border border-slate-200 rounded-2xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 hover:border-blue-300 hover:scale-[1.02]">
                {article.social_image && (
                  <div className="relative overflow-hidden">
                    <img
                      src={article.social_image}
                      alt={article.title}
                      className="w-full h-48 object-cover transition-transform duration-500 group-hover:scale-110"
                    />
                    <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  </div>
                )}
                <div className="p-6">
                  <h3 className="font-bold text-lg text-slate-800 mb-3 group-hover:text-blue-600 transition-colors line-clamp-2">
                    {article.title}
                  </h3>
                  <p className="text-slate-600 mb-4 line-clamp-3 leading-relaxed">
                    {article.description}
                  </p>
                  <div className="flex flex-wrap gap-2 mb-6">
                    {article.tag_list.slice(0, 3).map((tag) => (
                      <span
                        key={tag}
                        className="px-3 py-1 bg-gradient-to-r from-blue-50 to-purple-50 text-blue-700 text-xs font-medium rounded-full border border-blue-200 hover:border-blue-300 transition-colors"
                      >
                        #{tag}
                      </span>
                    ))}
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-4 text-sm text-slate-500">
                      <span className="flex items-center gap-2">
                        <FaRegClock className="text-blue-500" />
                        {article.reading_time_minutes} min read
                      </span>
                      <span className="flex items-center gap-2">
                        <FaRegHeart className="text-red-500" />
                        {article.public_reactions_count}
                      </span>
                    </div>
                    <a
                      href={article.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="inline-flex items-center gap-2 text-blue-600 hover:text-blue-700 font-medium transition-colors group"
                    >
                      Read Article
                      <FaExternalLinkAlt className="group-hover:translate-x-0.5 transition-transform" size={12} />
                    </a>
                  </div>
                </div>
              </div>
            );
          }
          
          ---

        üìÑ DevToSection.jsx
          ---
          import { useState } from "react";
          import { useForm } from "@tanstack/react-form";
          import { zodValidator } from "@tanstack/zod-form-adapter";
          import { z } from "zod";
          import { getArticles } from "../../services/devto";
          import ArticleCard from "./ArticleCard";
          import Button from "../UI/Button";
          
          const schema = z.object({
            username: z.string().min(1, "Username is required"),
          });
          
          export default function DevToSection() {
            const [articles, setArticles] = useState([]);
            const [loading, setLoading] = useState(false);
            const [error, setError] = useState(null);
          
            const form = useForm({
              validator: zodValidator,
              defaultValues: {
                username: "",
              },
              onSubmit: async ({ value }) => {
                try {
                  setLoading(true);
                  setError(null);
                  const data = await getArticles(value.username);
                  setArticles(data);
                } catch (err) {
                  setError(err.message);
                } finally {
                  setLoading(false);
                }
              },
            });
          
            return (
              <div className="space-y-8">
                <div className="bg-gradient-to-r from-slate-50 to-blue-50 rounded-2xl p-6 border border-slate-200">
                  <form
                    onSubmit={(e) => {
                      e.preventDefault();
                      form.handleSubmit();
                    }}
                    className="flex gap-4"
                  >
                    <form.Field
                      name="username"
                      children={(field) => (
                        <div className="flex-1">
                          <input
                            name={field.name}
                            value={field.state.value}
                            onBlur={field.handleBlur}
                            onChange={(e) => field.handleChange(e.target.value)}
                            placeholder="Enter Dev.to username"
                            className="w-full px-4 py-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all bg-white shadow-sm"
                          />
                        </div>
                      )}
                    />
                    <Button
                      type="submit"
                      disabled={loading}
                      className="px-6 py-3 min-w-[120px]"
                    >
                      {loading ? (
                        <div className="flex items-center gap-2">
                          <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                          Loading...
                        </div>
                      ) : (
                        "Fetch Articles"
                      )}
                    </Button>
                  </form>
                </div>
          
                {error && (
                  <div className="bg-gradient-to-r from-red-50 to-rose-50 border border-red-200 text-red-700 px-6 py-4 rounded-2xl shadow-lg">
                    <div className="flex items-center gap-3">
                      <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                      {error}
                    </div>
                  </div>
                )}
          
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {articles.map((article) => (
                    <ArticleCard key={article.id} article={article} />
                  ))}
                </div>
              </div>
            );
          }
          ---

      üìÅ GitHub/
        üìÑ RepoCard.jsx
          ---
          import { FaStar, FaCodeBranch, FaLock } from "react-icons/fa";
          
          export default function RepoCard({ repo }) {
            return (
              <div className="group bg-white rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 border border-slate-200 hover:border-blue-300 hover:scale-[1.02]">
                <div className="flex items-start justify-between mb-4">
                  <div className="flex-1">
                    <h3 className="font-bold text-lg text-slate-800 group-hover:text-blue-600 transition-colors mb-2 line-clamp-1">
                      {repo.name}
                    </h3>
                    {repo.private && (
                      <span className="inline-flex items-center gap-1 text-xs bg-amber-50 text-amber-700 px-2 py-1 rounded-full border border-amber-200">
                        <FaLock size={10} />
                        Private
                      </span>
                    )}
                  </div>
                </div>
                
                <p className="text-slate-600 text-sm mb-4 line-clamp-2 leading-relaxed">
                  {repo.description || "No description available"}
                </p>
                
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center gap-1">
                    <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
                    <span className="text-sm text-slate-600 font-medium">
                      {repo.language || "Unknown"}
                    </span>
                  </div>
                  <div className="flex items-center gap-4">
                    <span className="flex items-center gap-1.5 text-sm text-slate-500">
                      <FaStar className="text-yellow-500" />
                      {repo.stargazers_count}
                    </span>
                    <span className="flex items-center gap-1.5 text-sm text-slate-500">
                      <FaCodeBranch className="text-blue-500" />
                      {repo.forks_count}
                    </span>
                  </div>
                </div>
                
                <a
                  href={repo.html_url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="inline-flex items-center gap-2 text-blue-600 hover:text-blue-700 font-medium transition-colors group-hover:translate-x-1"
                >
                  View Repository
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                  </svg>
                </a>
              </div>
            );
          }
          
          ---

        üìÑ ReposSection.jsx
          ---
          import { useQuery } from "@tanstack/react-query";
          import { getRepos } from "../../services/github";
          import RepoCard from "./RepoCard";
          import Loader from "../UI/Loader";
          
          export default function ReposSection() {
            const { data, isLoading, error } = useQuery({
              queryKey: ["repos"],
              queryFn: getRepos,
            });
          
            if (isLoading) return <Loader />;
            
            if (error) return (
              <div className="bg-gradient-to-r from-red-50 to-rose-50 border border-red-200 text-red-700 px-6 py-4 rounded-2xl shadow-lg">
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                  Error: {error.message}
                </div>
              </div>
            );
          
            return (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {data?.map((repo) => (
                  <RepoCard key={repo.id} repo={repo} />
                ))}
              </div>
            );
          }
          ---

      üìÅ Layout/
        üìÑ Footer.jsx
          ---
          export default function Footer() {
            return (
              <footer className="bg-gradient-to-r from-slate-900 via-slate-800 to-slate-900 text-slate-300 py-8 border-t border-slate-700">
                <div className="container mx-auto px-6">
                  <div className="text-center">
                    <div className="flex justify-center items-center gap-2 mb-4">
                      <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg flex items-center justify-center">
                        <span className="text-white font-bold text-sm">D</span>
                      </div>
                      <span className="text-xl font-bold text-white">DevDash</span>
                    </div>
                    <p className="text-slate-400">
                      ¬© {new Date().getFullYear()} DevDash. Crafted with passion for developers.
                    </p>
                  </div>
                </div>
              </footer>
            );
          }
          ---

        üìÑ Header.jsx
          ---
          import { useAuth } from "../../context/AuthContext";
          import { FiLogOut } from "react-icons/fi";
          
          export default function Header() {
            const { user, logout } = useAuth();
          
            return (
              <header className="bg-gray-900 text-white shadow-md">
                <div className="container mx-auto px-6 py-4 flex items-center justify-between">
                  <h1 className="text-2xl font-bold">DevDash</h1>
                  {user && (
                    <div className="flex items-center gap-6">
                      <div className="flex items-center gap-3">
                        {user.avatarUrl && (
                          <img
                            src={user.avatarUrl}
                            alt={user.username}
                            className="w-10 h-10 rounded-full border-2 border-blue-500"
                          />
                        )}
                        <span className="font-medium">{user.username}</span>
                      </div>
                      <button
                        onClick={logout}
                        className="p-2 text-gray-300 hover:text-white transition-colors"
                        title="Logout"
                      >
                        <FiLogOut size={20} />
                      </button>
                    </div>
                  )}
                </div>
              </header>
            );
          }
          ---

        üìÑ MainLayout.jsx
          ---
          import { Outlet } from "react-router-dom";
          import Header from "./Header";
          import Footer from "./Footer";
          
          export default function MainLayout() {
            return (
              <div className="min-h-screen flex flex-col bg-gray-50">
                <Header />
                <main className="flex-1">
                  <Outlet />
                </main>
                <Footer />
              </div>
            );
          }   
          ---

      üìÅ UI/
        üìÑ Button.jsx
          ---
          import { forwardRef } from "react";
          
          const Button = forwardRef(({
            children,
            variant = "primary",
            className = "",
            as: Component = "button",
            ...props
          }, ref) => {
            const baseClasses = "px-5 py-2.5 rounded-lg font-medium transition-colors inline-flex items-center justify-center gap-2 focus:outline-none focus:ring-2 focus:ring-offset-2";
          
            const variants = {
              primary: "bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500",
              outline: "border border-blue-600 text-blue-600 hover:bg-blue-50 focus:ring-blue-500",
              danger: "bg-red-600 text-white hover:bg-red-700 focus:ring-red-500",
              secondary: "bg-gray-200 text-gray-800 hover:bg-gray-300 focus:ring-gray-500",
            };
          
            const classes = `${baseClasses} ${variants[variant]} ${className}`;
          
            return (
              <Component
                ref={ref}
                className={classes}
                {...props}
              >
                {children}
              </Component>
            );
          });
          
          Button.displayName = "Button";
          
          export default Button;
          ---

        üìÑ Card.jsx
          ---
          import { forwardRef } from 'react';
          import clsx from 'clsx';
          
          const Card = forwardRef(({
            children,
            className = '',
            hoverEffect = true,
            padding = 'p-6',
            as: Component = 'div',
            ...props
          }, ref) => {
            const baseClasses = 'bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden';
            const hoverClasses = hoverEffect ? 'hover:shadow-md transition-shadow duration-200' : '';
          
            return (
              <Component
                ref={ref}
                className={clsx(
                  baseClasses,
                  hoverClasses,
                  padding,
                  className
                )}
                {...props}
              >
                {children}
              </Component>
            );
          });
          
          Card.displayName = 'Card';
          
          export default Card;
          
          export const CardHeader = ({ children, className = '', ...props }) => (
            <div 
              className={clsx(
                'px-6 py-4 border-b border-gray-100 bg-gray-50 rounded-t-xl',
                className
              )}
              {...props}
            >
              {children}
            </div>
          );
          
          export const CardTitle = ({ children, className = '', ...props }) => (
            <h3 
              className={clsx(
                'text-lg font-semibold text-gray-800',
                className
              )}
              {...props}
            >
              {children}
            </h3>
          );
          
          export const CardBody = ({ children, className = '', ...props }) => (
            <div 
              className={clsx(
                'p-6',
                className
              )}
              {...props}
            >
              {children}
            </div>
          );
          
          export const CardFooter = ({ children, className = '', ...props }) => (
            <div 
              className={clsx(
                'px-6 py-4 border-t border-gray-100 bg-gray-50 rounded-b-xl',
                className
              )}
              {...props}
            >
              {children}
            </div>
          );
          ---

        üìÑ Loader.jsx
          ---
          export default function Loader({ size = 'medium', variant = 'primary', fullScreen = false }) {
            const sizeClasses = {
              small: 'w-8 h-8',
              medium: 'w-16 h-16',
              large: 'w-24 h-24'
            };
          
            const variants = {
              primary: {
                outer: 'border-violet-600',
                inner: 'border-indigo-600',
                pulse: 'border-violet-400/30'
              },
              secondary: {
                outer: 'border-emerald-600',
                inner: 'border-teal-600',
                pulse: 'border-emerald-400/30'
              },
              accent: {
                outer: 'border-amber-600',
                inner: 'border-orange-600',
                pulse: 'border-amber-400/30'
              }
            };
          
            const LoaderContent = () => (
              <div className="relative flex items-center justify-center">
                <div className={`${sizeClasses[size]} relative`}>
                  <div className={`absolute inset-0 rounded-full border-4 border-t-4 ${variants[variant].outer} animate-spin`}></div>
                  <div className={`absolute inset-2 rounded-full border-4 border-r-4 ${variants[variant].inner} animate-spin`} style={{ animationDirection: 'reverse', animationDuration: '0.8s' }}></div>
                  <div className={`absolute inset-0 rounded-full border-4 ${variants[variant].pulse} animate-ping`}></div>
                </div>
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="w-2 h-2 bg-gradient-to-r from-violet-500 to-indigo-500 rounded-full animate-pulse"></div>
                </div>
              </div>
            );
          
            if (fullScreen) {
              return (
                <div className="fixed inset-0 bg-gradient-to-br from-violet-50/80 via-white/80 to-indigo-50/80 backdrop-blur-sm flex items-center justify-center z-50">
                  <div className="bg-white/90 backdrop-blur-xl rounded-3xl p-12 shadow-2xl shadow-violet-500/20 border border-violet-200/50">
                    <LoaderContent />
                    <div className="mt-8 text-center">
                      <p className="text-slate-600 font-medium">Loading amazing content...</p>
                      <div className="mt-4 flex justify-center space-x-1">
                        <div className="w-2 h-2 bg-violet-500 rounded-full animate-bounce"></div>
                        <div className="w-2 h-2 bg-indigo-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                        <div className="w-2 h-2 bg-purple-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                      </div>
                    </div>
                  </div>
                </div>
              );
            }
          
            return (
              <div className="flex justify-center items-center py-16">
                <div className="bg-white/80 backdrop-blur-xl rounded-3xl p-8 shadow-xl shadow-violet-500/10 border border-violet-200/50">
                  <LoaderContent />
                </div>
              </div>
            );
          }
          ---

    üìÅ constants/
      üìÑ routes.js
        ---
        export const ROUTES = {
          HOME: "/",
          LOGIN: "/login",
          DASHBOARD: "/dashboard",
        }
        ---

    üìÅ context/
      üìÑ AuthContext.jsx
        ---
        import { createContext, useContext, useEffect, useState } from "react";
        import { useNavigate } from "react-router-dom";
        import { loginWithGithub, logoutUser, getProfile } from "../services/auth";
        
        const AuthContext = createContext();
        
        export function AuthProvider({ children }) {
          const [user, setUser] = useState(null);
          const [loading, setLoading] = useState(true);
          const [initialized, setInitialized] = useState(false);
          const navigate = useNavigate();
        
          useEffect(() => {
            // Only run initialization once
            if (initialized) return;
        
            const initializeAuth = async () => {
              console.log("üîç Starting authentication initialization...");
              console.log("üåê Current URL:", window.location.href);
              console.log("üç™ Current cookies:", document.cookie);
              console.log(
                "üéØ API Base URL:",
                import.meta.env.VITE_API_URL || "http://localhost:5000"
              );
        
              // ‚úÖ Check for token in URL (fallback from OAuth)
              const urlParams = new URLSearchParams(window.location.search);
              const tokenFromUrl = urlParams.get('token');
              
              if (tokenFromUrl) {
                console.log("üîë Found token in URL, setting as cookie...");
                
                // Set the token as a cookie with proper parameters
                const isSecure = window.location.protocol === 'https:';
                const cookieValue = `token=${tokenFromUrl}; path=/; max-age=${7 * 24 * 60 * 60}`;
                
                if (isSecure) {
                  document.cookie = `${cookieValue}; secure; samesite=strict`;
                } else {
                  document.cookie = `${cookieValue}; samesite=lax`;
                }
                
                // Also set alternative cookie variations for better compatibility
                if (isSecure) {
                  document.cookie = `token_alt=${tokenFromUrl}; path=/; max-age=${7 * 24 * 60 * 60}; secure; samesite=none`;
                  document.cookie = `token_cross=${tokenFromUrl}; path=/; max-age=${7 * 24 * 60 * 60}; secure; samesite=none`;
                }
                
                // Clear the token from URL
                window.history.replaceState({}, document.title, window.location.pathname);
                
                console.log("‚úÖ Token set as cookies from URL");
              }
        
              try {
                console.log("üì° Attempting to fetch user profile...");
                const profile = await getProfile();
        
                if (profile && profile.user) {
                  console.log("‚úÖ User authenticated successfully:", profile.user);
                  setUser(profile.user);
                } else {
                  console.log("‚ùå No user profile found in response:", profile);
                  setUser(null);
                }
              } catch (error) {
                console.error("‚ùå Authentication initialization failed:", error);
                console.error("üìä Error details:", {
                  status: error.response?.status,
                  data: error.response?.data,
                  headers: error.response?.headers,
                });
        
                setUser(null);
        
                // Only clear cookies if it's a 401 error (unauthorized)
                if (error.response?.status === 401) {
                  console.log("üîê 401 error - attempting to clear session...");
                  try {
                    await logoutUser();
                    console.log("‚úÖ Session cleared successfully");
                  } catch (logoutError) {
                    console.error("‚ùå Failed to clear session:", logoutError);
                  }
                }
              } finally {
                setLoading(false);
                setInitialized(true);
                console.log("üèÅ Authentication initialization complete");
                console.log("üë§ Final user state:", user);
                console.log("‚è≥ Final loading state:", false);
              }
            };
        
            initializeAuth();
          }, [initialized]);
        
          // ‚úÖ Simplified effect to handle navigation after authentication
          useEffect(() => {
            if (!initialized || loading) return;
        
            // Check if we're on the dashboard but have no user
            if (window.location.pathname === "/dashboard" && !user) {
              console.log("üö´ On dashboard but no user, redirecting to login");
              navigate("/login", { replace: true });
            }
        
            // Check if we're on login but have a user
            if (window.location.pathname === "/login" && user) {
              console.log("‚úÖ On login but user exists, redirecting to dashboard");
              navigate("/dashboard", { replace: true });
            }
          }, [user, loading, initialized, navigate]);
        
          // ‚úÖ Handle OAuth errors
          useEffect(() => {
            const urlParams = new URLSearchParams(window.location.search);
            const error = urlParams.get('error');
            
            if (error) {
              console.log("‚ùå OAuth error detected:", error);
              // Clear any error parameters from URL
              window.history.replaceState({}, document.title, window.location.pathname);
              setLoading(false); // Stop loading on error
            }
          }, []);
        
          const login = () => {
            try {
              console.log("üîê Initiating GitHub login...");
              setLoading(true);
              loginWithGithub(); // redirects to GitHub OAuth
            } catch (error) {
              console.error("‚ùå Login initiation failed:", error);
              setLoading(false);
              navigate("/login", { replace: true });
            }
          };
        
          const logout = async () => {
            try {
              console.log("üö™ Initiating logout...");
              setLoading(true);
              await logoutUser();
              console.log("‚úÖ Logout successful");
            } catch (error) {
              console.error("‚ùå Logout failed:", error);
            } finally {
              setUser(null);
              setLoading(false);
              console.log("üè† Navigating to login page...");
              navigate("/login", { replace: true });
            }
          };
        
          // ‚úÖ Add function to refresh user state
          const refreshUser = async () => {
            try {
              console.log("üîÑ Refreshing user state...");
              const profile = await getProfile();
              if (profile && profile.user) {
                setUser(profile.user);
                return true;
              } else {
                setUser(null);
                return false;
              }
            } catch (error) {
              console.error("‚ùå Failed to refresh user:", error);
              setUser(null);
              return false;
            }
          };
        
          const value = {
            user,
            loading,
            login,
            logout,
            refreshUser,
          };
        
          console.log(
            "üèóÔ∏è AuthContext render - User:",
            user ? "exists" : "null",
            "Loading:",
            loading,
            "Initialized:",
            initialized
          );
        
          return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
        }
        
        export const useAuth = () => useContext(AuthContext);
        
        ---

    üìÅ hooks/
      üìÑ useAuth.js
        ---
        import { useAuth } from "../context/AuthContext";
        
        export default function useAuthHook() {
          return useAuth();
        }
        ---

      üìÑ useDevTo.js
        ---
        import { useQuery } from "@tanstack/react-query";
        import { getArticles } from "../services/devto";
        
        export default function useDevTo(username) {
          return useQuery({
            queryKey: ["devto", username],
            queryFn: () => getArticles(username),
            enabled: !!username,
          });
        }
        ---

      üìÑ useEvents.js
        ---
        import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
        import { getEvents, createEvent } from "../services/events";
        
        export function useGetEvents() {
          return useQuery({
            queryKey: ["events"],
            queryFn: getEvents,
          });
        }
        
        export function useCreateEvent() {
          const queryClient = useQueryClient();
          return useMutation({
            mutationFn: createEvent,
            onSuccess: () => {
              queryClient.invalidateQueries(["events"]);
            },
          });
        }
        ---

      üìÑ useGitHub.js
        ---
        import { useQuery } from "@tanstack/react-query";
        import { getRepos } from "../services/github";
        
        export default function useGitHub() {
          return useQuery({
            queryKey: ["repos"],
            queryFn: getRepos,
          });
        }
        ---

    üìÑ index.css
      ---
      @import "tailwindcss";
      ---

    üìÑ main.jsx
      ---
      import React from 'react'
      import { createRoot } from "react-dom/client";
      import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
      import "./index.css";
      import App from "./App.jsx";
      
      const queryClient = new QueryClient();
      
      createRoot(document.getElementById("root")).render(
        <QueryClientProvider client={queryClient}>
          <App />
        </QueryClientProvider>
      );
      
      ---

    üìÅ pages/
      üìÑ Dashboard.jsx
        ---
        import { useState } from "react";
        import { useAuth } from "../context/AuthContext";
        import ReposSection from "../components/GitHub/ReposSection";
        import DevToSection from "../components/DevTo/DevToSection";
        import EventCalendar from "../components/Calendar/EventCalendar";
        import Header from "../components/Layout/Header";
        import Footer from "../components/Layout/Footer";
        
        export default function Dashboard() {
          const [activeTab, setActiveTab] = useState("repos");
          const { user } = useAuth();
        
          const tabs = [
            { 
              id: "repos", 
              label: "Repositories", 
              component: <ReposSection />,
              icon: "üöÄ",
              color: "from-violet-500 to-indigo-500"
            },
            { 
              id: "articles", 
              label: "Articles", 
              component: <DevToSection />,
              icon: "üìö",
              color: "from-emerald-500 to-teal-500"
            },
            { 
              id: "calendar", 
              label: "Calendar", 
              component: <EventCalendar />,
              icon: "üìÖ",
              color: "from-amber-500 to-orange-500"
            },
          ];
        
          return (
            <div className="min-h-screen bg-gradient-to-br from-violet-50 via-white to-indigo-50 relative overflow-hidden">
              <div className="absolute top-0 left-0 w-full h-full bg-[radial-gradient(ellipse_at_top_right,_var(--tw-gradient-stops))] from-violet-400/10 via-transparent to-indigo-400/10 pointer-events-none"></div>
              
              <Header />
              
              <main className="relative z-10 container mx-auto px-6 py-12">
                <div className="space-y-12">
                  <div className="relative group">
                    <div className="absolute -inset-4 bg-gradient-to-r from-violet-600 via-indigo-600 to-purple-600 rounded-3xl blur-2xl opacity-20 group-hover:opacity-30 transition-opacity duration-500"></div>
                    <div className="relative bg-gradient-to-br from-violet-600 via-indigo-600 to-purple-600 rounded-3xl shadow-2xl shadow-violet-500/25 p-12 text-white overflow-hidden">
                      <div className="absolute top-0 right-0 w-96 h-96 bg-gradient-to-br from-white/10 to-transparent rounded-full blur-3xl"></div>
                      <div className="absolute bottom-0 left-0 w-64 h-64 bg-gradient-to-tr from-indigo-400/20 to-transparent rounded-full blur-2xl"></div>
                      <div className="relative z-10">
                        <div className="flex items-center gap-4 mb-6">
                          <div className="w-16 h-16 bg-white/20 backdrop-blur-xl rounded-2xl flex items-center justify-center border border-white/30">
                            <span className="text-2xl">üëã</span>
                          </div>
                          <div>
                            <h1 className="text-4xl font-bold bg-gradient-to-r from-white to-violet-100 bg-clip-text text-transparent">
                              Welcome back, {user?.displayName || user?.username}!
                            </h1>
                            <p className="text-violet-100 text-lg mt-2">
                              Ready to build something amazing today?
                            </p>
                          </div>
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-8">
                          {tabs.map((tab) => (
                            <div key={tab.id} className="bg-white/10 backdrop-blur-xl rounded-2xl p-6 border border-white/20 hover:bg-white/20 transition-all duration-300">
                              <div className="flex items-center gap-3 mb-3">
                                <span className="text-2xl">{tab.icon}</span>
                                <h3 className="text-lg font-semibold text-white">{tab.label}</h3>
                              </div>
                              <p className="text-violet-100 text-sm">
                                {tab.id === 'repos' && 'Manage your GitHub repositories'}
                                {tab.id === 'articles' && 'Discover Dev.to articles'}
                                {tab.id === 'calendar' && 'Organize your events'}
                              </p>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
        
                  <div className="bg-white/80 backdrop-blur-xl rounded-3xl shadow-2xl shadow-violet-500/10 border border-violet-200/50 overflow-hidden">
                    <div className="flex border-b border-violet-200/50 bg-gradient-to-r from-violet-50/50 to-indigo-50/50">
                      {tabs.map((tab) => (
                        <button
                          key={tab.id}
                          onClick={() => setActiveTab(tab.id)}
                          className={`group relative px-10 py-6 font-semibold transition-all duration-300 flex items-center gap-3 ${
                            activeTab === tab.id
                              ? "text-violet-700 bg-white/60 backdrop-blur-xl"
                              : "text-slate-600 hover:text-violet-600 hover:bg-white/40"
                          }`}
                        >
                          <span className="text-xl">{tab.icon}</span>
                          <span className="text-lg">{tab.label}</span>
                          {activeTab === tab.id && (
                            <div className={`absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r ${tab.color} rounded-full`}></div>
                          )}
                          <div className="absolute inset-0 bg-gradient-to-r from-violet-500/5 to-indigo-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                        </button>
                      ))}
                    </div>
        
                    <div className="p-12 bg-gradient-to-br from-white/60 via-white/80 to-violet-50/60 backdrop-blur-xl">
                      <div className="animate-fadeIn">
                        {tabs.find((tab) => tab.id === activeTab)?.component}
                      </div>
                    </div>
                  </div>
                </div>
              </main>
              
              <Footer />
              
              <style jsx>{`
                @keyframes fadeIn {
                  from {
                    opacity: 0;
                    transform: translateY(20px);
                  }
                  to {
                    opacity: 1;
                    transform: translateY(0);
                  }
                }
                
                .animate-fadeIn {
                  animation: fadeIn 0.5s ease-out;
                }
              `}</style>
            </div>
          );
        }
        ---

      üìÑ ErrorPage.jsx
        ---
        import { useRouteError } from "react-router-dom";
        import Button from "../components/UI/Button";
        import { ROUTES } from "../constants/routes";
        
        export default function ErrorPage() {
          let error = null;
        
          try {
            error = useRouteError();
          } catch (hookError) {
            console.warn("useRouteError not available, using fallback error handling");
            error = { message: "An unexpected error occurred" };
          }
        
          return (
            <div className="min-h-screen flex flex-col items-center justify-center p-4 text-center bg-gray-50">
              <div className="max-w-md space-y-4">
                <h1 className="text-5xl font-bold text-red-600 mb-4">Oops!</h1>
                <p className="text-xl text-gray-700">Something went wrong</p>
                <p className="text-gray-500 mb-8">
                  <i>{error?.statusText || error?.message || "Unknown error"}</i>
                </p>
                <div className="flex justify-center">
                  <Button as="a" href={ROUTES.HOME} className="px-6 py-3">
                    Return to Home
                  </Button>
                </div>
              </div>
            </div>
          );
        }
        
        ---

      üìÑ Home.jsx
        ---
        import { Link } from "react-router-dom";
        import { useAuth } from "../context/AuthContext";
        
        export default function Home() {
          const { user } = useAuth();
        
          return (
            <div className="min-h-screen flex flex-col items-center justify-center p-4 text-center bg-gradient-to-br from-indigo-50 to-purple-50">
              <div className="max-w-2xl mx-auto">
                <h1 className="text-5xl font-bold text-indigo-700 mb-6">
                  Welcome to DevDash
                </h1>
                <p className="text-xl text-gray-600 mb-8 max-w-md mx-auto">
                  Your all-in-one dashboard for GitHub repositories, Dev.to articles, and
                  event planning.
                </p>
                <div className="flex gap-4 justify-center">
                  {user ? (
                    <Link
                      to="/dashboard"
                      className="bg-indigo-600 text-white px-8 py-3 rounded-lg font-medium hover:bg-indigo-700 transition-all shadow-md hover:shadow-lg"
                    >
                      Go to Dashboard
                    </Link>
                  ) : (
                    <Link
                      to="/login"
                      className="bg-indigo-600 text-white px-8 py-3 rounded-lg font-medium hover:bg-indigo-700 transition-all shadow-md hover:shadow-lg"
                    >
                      Get Started
                    </Link>
                  )}
                </div>
              </div>
            </div>
          );
        }
        ---

      üìÑ Login.jsx
        ---
        import { Navigate, useLocation } from "react-router-dom";
        import { useAuth } from "../context/AuthContext";
        import GitHubAuthButton from "../components/Auth/GitHubAuthButton";
        
        export default function Login() {
          const { user, loading } = useAuth();
          const location = useLocation();
        
          console.log(
            "üîê Login page - Loading:",
            loading,
            "User:",
            user ? "exists" : "null"
          );
        
          // Show loading spinner while checking auth
          if (loading) {
            return (
              <div className="flex justify-center items-center min-h-screen bg-gray-50">
                <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-600"></div>
              </div>
            );
          }
        
          // If user is already logged in, redirect to dashboard
          if (!loading && user) {
            const redirectTo = location.state?.from?.pathname || "/dashboard";
            console.log("‚úÖ User already logged in, redirecting to:", redirectTo);
            return <Navigate to={redirectTo} replace />;
          }
        
          return (
            <div className="min-h-screen flex items-center justify-center bg-gray-50 p-4">
              <div className="bg-white rounded-xl shadow-md p-8 w-full max-w-md">
                <div className="text-center space-y-4">
                  <h1 className="text-3xl font-bold text-gray-800">
                    Welcome to DevDash
                  </h1>
                  <p className="text-gray-600 mb-6">
                    Connect with GitHub to access your developer dashboard
                  </p>
                  <div className="flex justify-center">
                    <GitHubAuthButton />
                  </div>
                  <p className="text-sm text-gray-500 mt-6">
                    By signing in, you agree to our Terms of Service and Privacy Policy
                  </p>
                </div>
              </div>
            </div>
          );
        }
        
        ---

    üìÅ services/
      üìÑ auth.js
        ---
        import axios from "../utils/api";
        
        export const loginWithGithub = () => {
          const API_URL = import.meta.env.VITE_API_URL || "http://localhost:5000";
          const cleanApiUrl = API_URL.replace(/\/$/, "");
        
          console.log(
            "üîê Redirecting to GitHub OAuth:",
            `${cleanApiUrl}/api/auth/github`
          );
          window.location.href = `${cleanApiUrl}/api/auth/github`;
        };
        
        export const logoutUser = async () => {
          try {
            console.log("üö™ Logging out user...");
            await axios.post("/api/auth/logout");
            console.log("‚úÖ Logout successful");
          } catch (error) {
            console.error("‚ùå Logout error:", error);
            throw error;
          }
        };
        
        export const getProfile = async () => {
          try {
            console.log("üë§ Fetching user profile...");
            const response = await axios.get("/api/auth/profile");
            console.log("‚úÖ Profile fetched successfully:", response.data);
            return response.data;
          } catch (error) {
            console.error(
              "‚ùå Profile fetch error:",
              error.response?.status,
              error.response?.data
            );
            throw error;
          }
        };
        
        ---

      üìÑ devto.js
        ---
        import axios from "../utils/api";
        
        export const getArticles = async (username) => {
          try {
            const response = await axios.get(`/api/devto/articles/${username}`);
            return response.data.data; 
          } catch (error) {
            console.error("Error fetching articles:", error);
            throw new Error(error.response?.data?.message || "Failed to fetch articles");
          }
        };
        ---

      üìÑ events.js
        ---
        import axios from "../utils/api";
        
        export const getEvents = async () => {
          try {
            const response = await axios.get("/api/events");
            return response.data.data;
          } catch (error) {
            console.error("Error fetching events:", error);
            throw new Error(error.response?.data?.message || "Failed to fetch events");
          }
        };
        
        export const createEvent = async (eventData) => {
          try {
            const response = await axios.post("/api/events", eventData);
            return response.data.data; 
          } catch (error) {
            console.error("Error creating event:", error);
            throw new Error(error.response?.data?.message || "Failed to create event");
          }
        };
        ---

      üìÑ github.js
        ---
        import axios from "../utils/api";
        
        export const getRepos = async () => {
          try {
            const response = await axios.get("/api/github/repos");
            return response.data.data; 
          } catch (error) {
            console.error("Error fetching repositories:", error);
            throw new Error(error.response?.data?.message || "Failed to fetch repositories");
          }
        };
        ---

    üìÅ utils/
      üìÑ api.js
        ---
        import axios from "axios";
        
        const api = axios.create({
          baseURL: import.meta.env.VITE_API_URL || "http://localhost:5000/api",
          withCredentials: true,
          timeout: 10000, // 10 seconds timeout
        });
        
        // üîê Helper: Get token from cookies, localStorage, or URL
        function getTokenFromMultipleSources() {
          try {
            const cookieNames = ["token", "token_alt", "token_cross", "token_debug"];
            const cookies = document.cookie.split(";");
        
            for (let cookie of cookies) {
              const [name, value] = cookie.trim().split("=");
              if (cookieNames.includes(name)) {
                console.log(`üç™ Found token in cookie: ${name}`);
                return value;
              }
            }
        
            const localStorageToken = localStorage.getItem("auth_token");
            if (localStorageToken) {
              console.log("üíæ Found token in localStorage");
              return localStorageToken;
            }
        
            const urlParams = new URLSearchParams(window.location.search);
            const urlToken = urlParams.get("token");
            if (urlToken) {
              console.log("üîó Found token in URL parameters");
              return urlToken;
            }
        
            console.warn("‚ùå No token found in any source");
            return null;
          } catch (err) {
            console.error("‚ùå Error extracting token:", err);
            return null;
          }
        }
        
        // üöÄ Request Interceptor
        api.interceptors.request.use(
          (config) => {
            console.log(`üöÄ ${config.method?.toUpperCase()} ‚Üí ${config.baseURL}${config.url}`);
            console.log("üì° Headers:", config.headers);
        
            config.retryCount = config.retryCount || 0;
            config.maxRetries = 3;
        
            const token = getTokenFromMultipleSources();
            if (token) {
              config.headers.Authorization = `Bearer ${token}`;
              console.log("üîë Added Authorization header");
            }
        
            return config;
          },
          (error) => {
            console.error("‚ùå Request error:", error);
            return Promise.reject(error);
          }
        );
        
        // üì¶ Response Interceptor
        api.interceptors.response.use(
          (response) => {
            console.log(`‚úÖ Response ${response.status} ‚Üê ${response.config.url}`);
            console.log("üì¶ Data:", response.data);
            return response;
          },
          async (error) => {
            const config = error.config;
            const status = error.response?.status;
        
            console.error(`‚ùå Response error from: ${config?.url}`);
            console.error(`üìä Status: ${status}`);
            console.error("üì¶ Error data:", error.response?.data);
        
            // üîÅ Retry on network or 5xx server errors
            if (!error.response || status >= 500) {
              if (config && config.retryCount < config.maxRetries) {
                config.retryCount += 1;
                console.warn(`üîÅ Retry ${config.retryCount}/${config.maxRetries}: ${config.url}`);
                await new Promise(res => setTimeout(res, 1000 * config.retryCount));
                return api(config);
              }
            }
        
            // üîê Clear invalid auth tokens on 401
            if (status === 401) {
              console.warn("üîê Unauthorized - clearing stored tokens");
              ["auth_token", "token", "access_token"].forEach((key) => {
                localStorage.removeItem(key);
              });
            }
        
            // üåê Handle network errors
            if (!error.response) {
              console.error("üåê Network Error:", {
                message: error.message,
                code: error.code,
                url: config?.url,
              });
            }
        
            return Promise.reject(error);
          }
        );
        
        export default api;
        
        ---

      üìÑ formSchemas.js
        ---
        import { z } from "zod";
        
        export const eventSchema = z.object({
          title: z.string().min(1, "Title is required"),
          date: z.string().min(1, "Date is required"),
          time: z.string().min(1, "Time is required"),
          description: z.string().optional(),
        });
        
        export const devToSchema = z.object({
          username: z.string().min(1, "Username is required"),
        });
        
        ---

      üìÑ helpers.js
        ---
        export const formatDate = (dateString) => {
          const options = { year: "numeric", month: "long", day: "numeric" };
          return new Date(dateString).toLocaleDateString(undefined, options);
        };
        
        export const formatDateTime = (dateString, timeString) => {
          const date = new Date(dateString);
          const [hours, minutes] = timeString.split(":");
          date.setHours(parseInt(hours), parseInt(minutes));
          return date.toLocaleString();
        };
        
        ---

  üìÑ vite.config.js
    ---
    import { defineConfig } from "vite";
    import react from "@vitejs/plugin-react";
    import tailwindcss from "@tailwindcss/vite";
    
    export default defineConfig({
      plugins: [react(), tailwindcss()],
      
      server: {
        proxy: {
          '/api': {
            target: 'https://devdash-github-oauth.onrender.com',
            changeOrigin: true,
            secure: true,
          },
        },
      },
    });
    
    ---


# Snapshot Summary
Total files processed: 53
